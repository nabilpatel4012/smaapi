services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      valkey:
        condition: service_started
    ports:
      - "4000:4000"
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    container_name: db
    image: mysql:8.4.4
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USERNAME}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "${DATABASE_USERNAME}",
          "--password=${DATABASE_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  valkey:
    image: docker.io/valkey/valkey:8.0-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes # Use only for development
      - VALKEY_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27019:27017"
    volumes:
      - mongo_data:/data/db
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    command: ["mongod", "--auth"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet --username $${MONGO_ROOT_USERNAME} --password $${MONGO_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' | grep 1",
        ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana

  uptime-kuma:
    image: louislam/uptime-kuma:1.23.16-alpine
    volumes:
      - uptime_kuma_data:/app/data
    ports:
      - 3003:3001
    restart: unless-stopped

volumes:
  prom_data:
  grafana-storage:
  mysql_data:
  uptime_kuma_data:
  valkey_data:
    driver: local
  mongo_data:
    driver: local
